data_300
data_160<-df2%>%filter(day>155 & day<165)%>%select(flow,flow_log,flow_var_log)
data_300<-df2%>%filter(day>295 & day<305)%>%select(flow,flow_log,flow_var_log)
ggplot(data=data_160,aes(x=flow))+
stat_function(
data = data_160,
mapping = aes(colour = "Day 160"),
fun     = dlnorm,
args    = list(
mean = mean(data_160$flow_loh),
sd   = mean(sqrt(data_160$flow_var_log))
)
) +
stat_function(
data = data_300,
mapping = aes(colour = "Day 300"),
fun     = dlnorm,
args    = list(
mean = mean(data_300$flow_log),
sd   = mean(sqrt(data_300$flow_var_log))
)
) +
theme_bw()+
ggtitle("Probabilistic Forecasting for Gaussian assumption")
data_11
data_160
data_160
data_160 <- as.numeric(data_160)
data_160<-df2%>%filter(day>155 & day<165)%>%select(as.numeric(flow),as.numeric(flow_log),as.numeric(flow_var_log))
df2
data_160<-df2 %>% filter(day>155 & day<165) %>% select(flow,flow_log,flow_var_log)
data_300<-df2 %>% filter(day>295 & day<305) %>% select(flow,flow_log,flow_var_log)
ggplot(data=data_160,aes(x=flow))+
stat_function(
data = data_160,
mapping = aes(colour = "Day 160"),
fun     = dlnorm,
args    = list(
mean = mean(data_160$flow_loh),
sd   = mean(sqrt(data_160$flow_var_log))
)
) +
stat_function(
data = data_300,
mapping = aes(colour = "Day 300"),
fun     = dlnorm,
args    = list(
mean = mean(data_300$flow_log),
sd   = mean(sqrt(data_300$flow_var_log))
)
) +
theme_bw()+
ggtitle("Probabilistic Forecasting for Gaussian assumption")
data_160<-df2 %>% filter(day>155 & day<165) %>% select(flow,flow_log,flow_var_log)
data_300<-df2 %>% filter(day>295 & day<305) %>% select(flow,flow_log,flow_var_log)
ggplot(data=data_160,aes(x=flow))+
stat_function(
data = data_160,
mapping = aes(colour = "Day 160"),
fun     = dlnorm,
args    = list(
mean = mean(data_160$flow_log),
sd   = mean(sqrt(data_160$flow_var_log))
)
) +
stat_function(
data = data_300,
mapping = aes(colour = "Day 300"),
fun     = dlnorm,
args    = list(
mean = mean(data_300$flow_log),
sd   = mean(sqrt(data_300$flow_var_log))
)
) +
theme_bw()+
ggtitle("Probabilistic Forecasting for Gaussian assumption")
data_160<-df2 %>% filter(day>155 & day<165) %>% select(flow,flow_log,flow_var_log)
data_300<-df2 %>% filter(day>295 & day<305) %>% select(flow,flow_log,flow_var_log)
ggplot(data=data_160,aes(x=flow))+
stat_function(
data = data_160,
mapping = aes(colour = "Day 160"),
fun     = dlnorm,
args    = list(
mean = mean(data_160$flow_log),
sd   = mean(sqrt(data_160$flow_var_log))
)
) +
stat_function(
data = data_300,
mapping = aes(colour = "Day 300"),
fun     = dlnorm,
args    = list(
mean = mean(data_300$flow_log),
sd   = mean(sqrt(data_300$flow_var_log))
)
) +
theme_bw()+
labels(main="Probabilistic Forecasting for Gaussian assumption",ylab = "probability")
data_160<-df2 %>% filter(day>155 & day<165) %>% select(flow,flow_log,flow_var_log)
data_300<-df2 %>% filter(day>295 & day<305) %>% select(flow,flow_log,flow_var_log)
ggplot(data=data_160,aes(x=flow))+
stat_function(
data = data_160,
mapping = aes(colour = "Day 160"),
fun     = dlnorm,
args    = list(
mean = mean(data_160$flow_log),
sd   = mean(sqrt(data_160$flow_var_log))
)
) +
stat_function(
data = data_300,
mapping = aes(colour = "Day 300"),
fun     = dlnorm,
args    = list(
mean = mean(data_300$flow_log),
sd   = mean(sqrt(data_300$flow_var_log))
)
) +
theme_bw()+
ggtitle("Probabilistic Forecasting for Gaussian assumption") +
ylab("probability")
setwd("~/block5/DSCI_553_lab2_fan0521")
library(tidyverse)
library(rjags)
acf(sample,plot=TRUE)
sample
plot(sample)
acf(sample,plot=TRUE)
library(tidyverse)
library(rjags)
model_specification <-
"model {
X ~ dbin(p, n)
Z ~ dcat(prior_prob)
p <- Z / 10
}"
# Let's define hyperparameters here
prior_probs <- rep( 1/9, 9)
# Let's create the list with the data to be loaded.
line_data <- list("X" = 10, "n" = 20, "prior_prob" = prior_probs)
model <- jags.model(textConnection(model_specification), data = line_data)
update(model, n.iter = 1000)
sample <- coda.samples(model, variable.names = "p", n.iter=1000)
summary(sample)
sample <- coda.samples(model, variable.names = "p", n.iter=10000)
summary(sample)
plot(sample)
x<- seq(0, 1, .01)
c <- c("red", "blue", "green", "pink")
a <- c(.5, 5, 1, 2, 2)
b <- c(.5, 1, 3, 2, 5)
plot(x,
dbeta(x, a[1], b[1]),
ylim = c(0,3),
main="A few examples of Beta densities",
type = 'l')
for (i in 2:5)
lines(x, dbeta(x, a[i], b[i]), col = c[i])
legend(x = .45,
y = 3,
legend=c("a=b=.5","a=5, b=1","a=1, b=3","a=2, b=2"),
col=cbind("black", "blue", "green", "pink"), lty=1)
#model specification
model_specification <-
"model {
X ~ dbin(p, n)
p ~ dbeta(a,b)
}"
#pick a rocket type
rockets <- read_csv("failure_counts.csv",
col_names = TRUE,
col_types = cols(col_character(),
col_integer(),
col_integer()))
rockets <- rockets %>% mutate(numberOfSuccesses=numberOfLaunches - numberOfFailures) %>% arrange(desc(numberOfSuccesses))
my_rocket <- rockets %>% group_by(LV.Type) %>%filter(LV.Type == "Soyuz-U")
my_rocket
#create data list
line_data <- list("X" = 615, "n" = 633, "a"=1,"b"=1)
#compile the model
model <- jags.model(textConnection(model_specification), data = line_data)
update(model, n.iter = 100000)
sample <- coda.samples(model, variable.names = "p", n.iter=100000,thin=10)
acf(sample,plot=TRUE)
sample
sample[[1]]
acf(sample[[1]],plot=TRUE)
#plot acf of the sample
par(mar=c(5,4,4,2)+0.2)
acf(sample[[1]],plot=TRUE)
#plot acf of the sample
par(mar=c(5,4,4,2)+0.2)
acf(sample[[1]],plot=TRUE,main="ACF")
#generate new 50000 samples
model_specification <-
"model {
X ~ dbin(p, n)
p ~ dbeta(a,b)
}"
update(model, n.iter = 100000)
new_sample <- coda.samples(model, variable.names = "p", n.iter=50000,thin=1)
par(mar=c(5,4,4,2)+0.2)
acf(new_sample[[1]],plot=TRUE,main="ACF with thin=1")
#check the length of sample vectors
sample_length <- lenght(sample[[1]])
#check the length of sample vectors
sample_lengh <- lengh(sample[[1]])
#check the length of sample vectors
sample_length <- length(sample[[1]])
new_sample_lengh <- lengh(new_sample[[1]])
#check the length of sample vectors
sample_length <- length(sample[[1]])
new_sample_length <- length(new_sample[[1]])
print(paste("length of sample generated with thin=10",sample_length))
print(paste("length of sample generated with thin=1",new_sample_length))
#check the length of sample vectors
sample_length <- length(sample[[1]])
new_sample_length <- length(new_sample[[1]])
print(paste("length of sample generated with thin=10 is",sample_length))
print(paste("length of sample generated with thin=1 is",new_sample_length))
model_specification <-
"model {
X ~ dbern(p)
p ~ dbeta(a,b)
}"
line_data <- list("X" = 615, "n" = 633, "a"=1,"b"=1)
update(model, n.iter = 10000)
bern_sample <- coda.samples(model, variable.names = "p", n.iter=10000,thin=10)
plot(bern_sample)
summary(bern_sample)
bern_model_specification <-
"model {
X ~ dbern(p)
p ~ dbeta(a,b)
}"
line_data <- list("X" = 615, "n" = 633, "a"=1,"b"=1)
update(model, n.iter = 10000)
bern_sample <- coda.samples(model, variable.names = "p", n.iter=10000,thin=10)
plot(bern_sample)
summary(bern_sample)
library(tidyverse)
library(rjags)
model_specification <-
"model {
X ~ dbin(p, n)
Z ~ dcat(prior_prob)
p <- Z / 10
}"
# Let's define hyperparameters here
prior_probs <- rep( 1/9, 9)
# Let's create the list with the data to be loaded.
line_data <- list("X" = 10, "n" = 20, "prior_prob" = prior_probs)
model <- jags.model(textConnection(model_specification), data = line_data)
update(model, n.iter = 1000)
sample <- coda.samples(model, variable.names = "p", n.iter=1000)
summary(sample)
sample <- coda.samples(model, variable.names = "p", n.iter=10000)
summary(sample)
plot(sample)
x<- seq(0, 1, .01)
c <- c("red", "blue", "green", "pink")
a <- c(.5, 5, 1, 2, 2)
b <- c(.5, 1, 3, 2, 5)
plot(x,
dbeta(x, a[1], b[1]),
ylim = c(0,3),
main="A few examples of Beta densities",
type = 'l')
for (i in 2:5)
lines(x, dbeta(x, a[i], b[i]), col = c[i])
legend(x = .45,
y = 3,
legend=c("a=b=.5","a=5, b=1","a=1, b=3","a=2, b=2"),
col=cbind("black", "blue", "green", "pink"), lty=1)
#model specification
model_specification <-
"model {
X ~ dbin(p, n)
p ~ dbeta(a,b)
}"
#pick a rocket type
rockets <- read_csv("failure_counts.csv",
col_names = TRUE,
col_types = cols(col_character(),
col_integer(),
col_integer()))
rockets <- rockets %>% mutate(numberOfSuccesses=numberOfLaunches - numberOfFailures) %>% arrange(desc(numberOfSuccesses))
my_rocket <- rockets %>% group_by(LV.Type) %>%filter(LV.Type == "Soyuz-U")
my_rocket
#create data list
line_data <- list("X" = 615, "n" = 633, "a"=1,"b"=1)
#compile the model
model <- jags.model(textConnection(model_specification), data = line_data)
update(model, n.iter = 100000)
sample <- coda.samples(model, variable.names = "p", n.iter=100000,thin=10)
#plot acf of the sample
par(mar=c(5,4,4,2)+0.2)
acf(sample[[1]],plot=TRUE,main="ACF with thin=10")
#generate new 50000 samples
model_specification <-
"model {
X ~ dbin(p, n)
p ~ dbeta(a,b)
}"
update(model, n.iter = 100000)
new_sample <- coda.samples(model, variable.names = "p", n.iter=50000,thin=1)
par(mar=c(5,4,4,2)+0.2)
acf(new_sample[[1]],plot=TRUE,main="ACF with thin=1")
#check the length of sample vectors
sample_length <- length(sample[[1]])
new_sample_length <- length(new_sample[[1]])
print(paste("length of sample generated with thin=10 is",sample_length))
print(paste("length of sample generated with thin=1 is",new_sample_length))
bern_model_specification <-
"model {
X ~ dbern(p)
p ~ dbeta(a,b)
}"
line_data <- list("X" = 615, "n" = 633, "a"=1,"b"=1)
update(model, n.iter = 10000)
bern_sample <- coda.samples(model, variable.names = "p", n.iter=10000,thin=10)
plot(bern_sample)
summary(bern_sample)
#summary of generated sample
summary(sample)
#plot the histogram of posterior distribution
hist(sample[[1]], main="Posterior Probability Distribution", xlab="Posterior Probability")
#obtain the HDI
hpd <- coda::HPDinterval(sample,prob=0.95)
hpd
print(paste("MLE is",615/633))
n_mcmc = c(50,500,50000)
n=633
data <- rockets %>% filter(LV.Type=="Soyuz-U")
data_sim <- c(-1,-1)
model_specification <-
"model {
X ~ dbin(p, n)
p ~ dbeta(a,b)
}"
for (i in 1:length(n_mcmc)){
line_data <- list("X" = 615, "n" = n, "a"=1,"b"=1)
model <- jags.model(textConnection(model_specification),
data = line_data, n.chain = 1,
quiet = TRUE)
update(model, n.iter = n_mcmc[i])
sample <- coda.samples(model, variable.names = "p", thin=5, n.iter=n_mcmc[i])
print(summary(sample))
data_sim <- rbind(data_sim,
cbind(rep(n_mcmc[i],n_mcmc[i]),
as.vector(sample[[1]]))
)
}
data_sim <- as_tibble(data_sim) %>%
rename(n_mcmc = V1, p = V2) %>%
filter(p != -1)
data_sim %>% ggplot(aes(p)) + geom_density() + facet_wrap(~n_mcmc)
# Let's restart the model
model_specification <-
"
model {
for (i in 1:n){
mu[i] <- beta1 + beta2 * x[i]
y[i] ~ dnorm ( mu[i] , phi )
}
for (i in 1:12){
mu.new[i] <- beta1 + beta2 * x.new[i]
y.new[i] ~ dnorm( mu.new[i] , phi )
}
phi ~ dgamma( 0.001 , 0.001 )
prec.beta<-0.000001*phi
beta1 ~ dnorm ( 0.0 , prec.beta )
beta2 ~ dnorm ( 0.0 , prec.beta )
sigma2 <- 1/phi
}
"
line_data <- list("n" = 12,
"x" = c(100, 90, 80, 70, 70, 70, 70, 65, 60, 60, 55, 50),
"y" = c(55, 70, 90, 100, 90, 105, 80, 110, 125, 115, 130, 130),
"x.new" = c( 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110),
"y.new" = c( NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA))
line_init <- list(.RNG.name = "base::Wichmann-Hill", .RNG.seed = 7)
model <- jags.model(textConnection(model_specification),
data = line_data,
inits = line_init,
n.chain = 1,
quiet = TRUE)
sample <- coda.samples(model, variable.names="beta2", n.iter=10000)
plot(sample[[1]][1:50,1],
type="l",
xlab="sample index",
ylab="sample value",
main="First 50 samples")
plot(5000:10000,
sample[[1]][5000:10000,1],
type="l",
xlab="sample index",
ylab="sample value",
main="Last 5000 samples")
n <- c(20, 50, 100, 500, 1000, 5000)
n_mcmc = 50000
data <- rockets %>% filter(LV.Type=="Soyuz-U")
data_sim <- c(-1,-1)
model_specification <-
"model {
X ~ dbin(p, n)
p ~ dbeta(a,b)
}"
for (i in 1:length(n)){
# Here, we artificially increase the observed data,
# but keeping the proportion of success close to the
# proportion of success of the rocket you chose.
line_data <- list("n" = n[i],
"a" = 1,
"b" = 1,
"X" = as.integer((data$numberOfLaunches - data$numberOfFailures) *
n[i]/data$numberOfLaunches))
model <- jags.model(textConnection(model_specification),
data = line_data, n.chain = 1,
quiet = TRUE)
update(model, n.iter = 1000)
sample <- coda.samples(model, variable.names = "p", thin=5, n.iter=n_mcmc)
data_sim <- rbind(data_sim,
cbind(rep(n[i],n_mcmc),
as.vector(sample[[1]]))
)
}
data_sim <- as_tibble(data_sim) %>%
rename(n_mcmc = V1, p = V2) %>%
filter(p != -1)
data_sim %>% ggplot(aes(p)) + geom_density() + facet_wrap(~n_mcmc)
n_mcmc = c(50,500,50000)
n=633
data <- rockets %>% filter(LV.Type=="Soyuz-U")
data_sim <- c(-1,-1)
model_specification <-
"model {
X ~ dbin(p, n)
p ~ dbeta(a,b)
}"
for (i in 1:length(n_mcmc)){
line_data <- list("X" = 615, "n" = n, "a"=1,"b"=1)
model <- jags.model(textConnection(model_specification),
data = line_data, n.chain = 1,
quiet = TRUE)
update(model, n.iter = n_mcmc[i])
sample <- coda.samples(model, variable.names = "p", thin=5, n.iter=n_mcmc[i])
print(summary(sample))
data_sim <- rbind(data_sim,
cbind(rep(n_mcmc[i],n_mcmc[i]),
as.vector(sample[[1]]))
)
}
data_sim <- as_tibble(data_sim) %>%
rename(n_mcmc = V1, p = V2) %>%
filter(p != -1)
data_sim %>% ggplot(aes(p)) + geom_density() + facet_wrap(~n_mcmc)
# Let's restart the model
model_specification <-
"
model {
for (i in 1:n){
mu[i] <- beta1 + beta2 * x[i]
y[i] ~ dnorm ( mu[i] , phi )
}
for (i in 1:12){
mu.new[i] <- beta1 + beta2 * x.new[i]
y.new[i] ~ dnorm( mu.new[i] , phi )
}
phi ~ dgamma( 0.001 , 0.001 )
prec.beta<-0.000001*phi
beta1 ~ dnorm ( 0.0 , prec.beta )
beta2 ~ dnorm ( 0.0 , prec.beta )
sigma2 <- 1/phi
}
"
line_data <- list("n" = 12,
"x" = c(100, 90, 80, 70, 70, 70, 70, 65, 60, 60, 55, 50),
"y" = c(55, 70, 90, 100, 90, 105, 80, 110, 125, 115, 130, 130),
"x.new" = c( 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110),
"y.new" = c( NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA))
line_init <- list(.RNG.name = "base::Wichmann-Hill", .RNG.seed = 7)
model <- jags.model(textConnection(model_specification),
data = line_data,
inits = line_init,
n.chain = 1,
quiet = TRUE)
sample <- coda.samples(model, variable.names="beta2", n.iter=10000)
plot(sample[[1]][1:50,1],
type="l",
xlab="sample index",
ylab="sample value",
main="First 50 samples")
plot(5000:10000,
sample[[1]][5000:10000,1],
type="l",
xlab="sample index",
ylab="sample value",
main="Last 5000 samples")
setwd("~/block5/KMediansR")
devtools::load_all()
devtools::check()
devtools::install()
grep("foofactors", installed.packages()[ , "Package"], value = TRUE)
grep("kmedians", installed.packages()[ , "Package"], value = TRUE)
grep("KmediansR", installed.packages()[ , "Package"], value = TRUE)
grep("KMediansR", installed.packages()[ , "Package"], value = TRUE)
devtools::use_mit_license()
usethis::use_mit_license()
usethis::use_mit_license("Fan Nie")
